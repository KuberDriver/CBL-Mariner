name: $(build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include: 
    - master
    - staging
    - dev
    - '1.0'
    - 1.0-dev
  paths:
    exclude: 
    # Exclude README.md from triggering content deployments
    # Exclude the app folder from triggering content deployments, since it isn't included in the Dockerfile anyway
    - README.md
    - app/* 

# no PR builds
pr: none

resources:
- repo: self

variables:
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildNumber)'
  sourceVersion: '$(Build.SourceVersion)'
  sourceBranch: '$(Build.SourceBranchName)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-18.04'

stages:
- stage: BuildPublishImages
  displayName: Build and Publish Images
  jobs:  
  - job: inputsrpms
    displayName: get_input-srpms
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    # Go tool installer
    # Find in cache or download a specific version of Go and add it to the PATH
    - task: GoTool@0
      inputs:
       version: '1.15' 
       #goPath: # Optional
       #goBin: # Optional
    
    - script: |
        # Golang and docker are already installed on the agent
        sudo apt-get update
        sudo apt -y install make tar wget curl rpm qemu-utils genisoimage pigz parted
      displayName: Install Remaining Prerequisites
    
    - script: |
        pushd toolkit
        sudo make go-tools REBUILD_TOOLS=y
        sudo make input-srpms DOWNLOAD_SRPMS=y
        popd
      displayName: Download SRPMS

  - job: isoquickstart
    displayName: iso-quickstart
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    - task: GoTool@0
      inputs:
       version: '1.13' 
       #goPath: # Optional
       #goBin: # Optional
    - script: |
        # Golang and docker are already installed on the agent
        sudo apt-get update
        sudo apt -y install make tar wget curl rpm qemu-utils genisoimage pigz
      displayName: Install Remaining Prerequisites

    - script: |
        pushd toolkit
        sudo make go-tools REBUILD_TOOLS=y
        sudo make input-srpms DOWNLOAD_SRPMS=y
        popd
      displayName: Configure the Environment

    - script: |
        pushd toolkit
        sudo make iso REBUILD_TOOLS=y REBUILD_PACKAGES=n
        popd
      displayName: ISO Quick Start

  - job: vhdxquickstart
    displayName: vhdx-quickstart
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: self
    - task: GoTool@0
      inputs:
       version: '1.13' 
       #goPath: # Optional
       #goBin: # Optional
    - script: |
        # Golang and docker are already installed on the agent
        sudo apt-get update
        sudo apt -y install make tar wget curl rpm qemu-utils genisoimage pigz
      displayName: Install Remaining Prerequisites

    - script: |
        pushd toolkit
        sudo make go-tools REBUILD_TOOLS=y
        sudo make input-srpms DOWNLOAD_SRPMS=y
        popd
      displayName: Configure Environment

    - script: |
        pushd toolkit
        sudo make image REBUILD_TOOLS=y REBUILD_PACKAGES=n
        popd
      displayName: VHDX Quick Start

  - job: demo
    displayName: demo-quickstart
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        # Add a backports repo in order to install the necessary version of Go.
        sudo add-apt-repository ppa:longsleep/golang-backports
        sudo apt-get update
        
        # Install required dependencies.
        sudo apt -y install make tar wget curl rpm qemu-utils golang-1.15-go genisoimage python-minimal bison gawk
        
        # Recommended but not required: `pigz` for faster compression operations.
        sudo apt -y install pigz
        
        # Fix go 1.15 link
        sudo ln -vsf /usr/lib/go-1.15/bin/go /usr/bin/go
        
        # Install Docker.
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker $USER
      displayName: Install Remaining Prerequisites

    - script: |
        git clone https://github.com/microsoft/CBL-Mariner.git
        pushd CBL-Mariner/toolkit
        git checkout 1.0-stable
        sudo make package-toolkit REBUILD_TOOLS=y
        popd
      displayName: Clone and Configure Environment

    - script: |
        git clone https://github.com/microsoft/CBL-MarinerDemo.git
        pushd CBL-MarinerDemo
        cp ../CBL-Mariner/out/toolkit-*.tar.gz ./
        tar -xzvf toolkit-*.tar.gz
      displayName: Clode demo repo and extract toolkit      

    - script: |
        pwd
        ls
        cd CBL-MarinerDemo/toolkit
        sudo make image CONFIG_FILE=../imageconfigs/demo_vhd.json
        sudo make iso CONFIG_FILE=../imageconfigs/demo_iso.json
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: |
          CBL-MarinerDemo/out/images/demo_iso/*.iso
          CBL-MarinerDemo/out/images/demo_vhd/*.iso
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@1
      inputs:
        artifactType: 'pipeline'
        artifactName: 'images' 